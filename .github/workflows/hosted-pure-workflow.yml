# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT

# A GitHub workflow using CMake, Ninja and vcpkg.
# It is called "pure" because it is an example which minimizes the usage of custom GitHub actions,
# but leverages directly the tools that could be easily run on your development machines (i.e. CMake, vcpkg, Ninja).
name: hosted-pure-workflow
#on: [push]
on:
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }}-hosted-pure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
#          - os: macos-latest
#            triplet: x64-osx

    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/builddir/vcpkg_archives
      BUILD_COMMANDS_ROOT: ${{ github.workspace }}/_build
      CMAKE_COMMON_ARGS: -DCONFIG_BUILD_DIR="${{ github.workspace }}/builddir/" -DGIT_WORKSPACE=${{ github.workspace }} -P ${{ github.workspace }}/_build/Build.cmake

    steps:
      - name: Checkout actions
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout arccon
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/arccon
          path: arccon
          ref: dev/cea

      - name: Checkout arccore
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/arccore
          path: arccore
          ref: dev/cea

      - name: download and install msmpi 10.0
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          ${{ env.BUILD_COMMANDS_ROOT }}\download_mswin_10.bat
      
      # Setup the build agen machine with the most recent versions of CMake and Ninja.
      # Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore vcpkg binaries
        uses: actions/cache@v2
        with:
          path: "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          key: ${{ matrix.triplet }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-vpckg-binaries-v2

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.CMAKE_BUILD_DIR }}/vcpkg/vcpkg_installed/
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever
          # vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must
          # happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the
          # used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly,
          #in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate
      - name: Show content of workspace after cache has been restored
        run: find $RUNNER_WORKSPACE
        shell: bash
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install dependencies and generate project files
        shell: bash
        run: |
          mkdir -p "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
          cmake -S "${{ github.workspace }}/vcpkg_manifest" -B "${{ env.CMAKE_BUILD_DIR }}/vcpkg" -GNinja -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Configure, build and install arccon
        run: cmake -DBUILD_COMMANDS="configure_arccon;build_arccon;install_arccon" ${{ env.CMAKE_COMMON_ARGS }}

      - name: Configure and build arccore
        run: cmake -DBUILD_COMMANDS="configure_arccore;build_arccore" ${{ env.CMAKE_COMMON_ARGS }}

      - name: Test arccore
        run: cmake -DBUILD_COMMANDS="test_arccore" ${{ env.CMAKE_COMMON_ARGS }}
