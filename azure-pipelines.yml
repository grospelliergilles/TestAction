# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-20.04

steps:
- checkout: self
  submodules: true

- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- script: |
    curl -Ls https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip -o ninja-linux.zip
    unzip ninja-linux.zip
    sudo cp -v ninja /usr/bin/
    echo "$PATH"
  displayName: Install Ninja
  # TODO: ajoute dans la cle du cache le numero du commit

- task: Cache@2
  displayName: Cache vcpkg artifcats
  inputs:
    key: '$(Build.SourcesDirectory)/vcpkg_manifest/vcpkg.json | "$(Agent.OS)"'
    path: '$(Build.BinariesDirectory)/vcpkg'

# CMake
# Build with the CMake cross-platform build system
- task: CMake@1
  displayName: Build vcpkg artifcats
  inputs:
    cmakeArgs: -S "$(Build.SourcesDirectory)/vcpkg_manifest" -B "$(Build.BinariesDirectory)/vcpkg" -DCMAKE_TOOLCHAIN_FILE="$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake"

- script: |
    /bin/pwd
    ls -lart
    echo "VCPKG dir"
    ls -lart "$(Build.BinariesDirectory)/vcpkg/vcpkg_installed/x64-linux"
    echo "VCPKG bin dir"
    ls -lart "$(Build.BinariesDirectory)/vcpkg/vcpkg_installed/x64-linux/bin"
    $(Build.SourcesDirectory)/_build/print.sh
  displayName: Print infos

# CMake
# Build with the CMake cross-platform build system
- task: CMake@1
  displayName: Build code
  inputs:
    cmakeArgs: -S "$(Build.SourcesDirectory)" -B "$(Build.BinariesDirectory)/mybuild" -C $(Build.BinariesDirectory)/vcpkg/my.vcpkg.config.cmake
