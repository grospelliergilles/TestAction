# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: Stage1
  jobs:
  - job: Build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-20.04'
        windows:
          imageName: 'windows-2019'

    pool:
      vmImage: $(imageName)

    variables:
    - name: VCPKG_DEFAULT_BINARY_CACHE
      value: $(Build.BinariesDirectory)/vcpkg_archives

    steps:
    - checkout: self
      submodules: true

    - script: echo Hello, world!
      displayName: 'Run a one-line script'
      
    - bash: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
      

    - bash: |
        mkdir -p '$(VCPKG_DEFAULT_BINARY_CACHE)'
      displayName: 'Run a multi-line script'

    - script: |
        C:\msys64\usr\bin\wget.exe "https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe"
        echo "Download finished"
        .\msmpisetup.exe -unattend -verbose
        dir "C:\Program Files"
        dir "C:\Program Files\Microsoft MPI"
        dir "C:\Program Files\Microsoft MPI\Bin"
        if: matrix.os == 'windows-latest'
      displayName: Download and install msmpi 10.0
      condition: eq(variables['matrix.imageName'],'windows-2019')
          
    - bash: |
        curl -Ls https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip -o ninja-linux.zip
        unzip ninja-linux.zip
        sudo cp -v ninja /usr/bin/
        echo "$PATH"
      displayName: Install Ninja
  # TODO: ajoute dans la cle du cache le numero du commit

    - task: Cache@2
      displayName: Cache vcpkg binaries
      inputs:
        key: '$(Agent.OS)'
        path: '$(VCPKG_DEFAULT_BINARY_CACHE)'

    - task: Cache@2
      displayName: Cache vcpkg bootstrap
      inputs:
        key: '$(Build.SourcesDirectory)/vcpkg_manifest/vcpkg.json | "$(Agent.OS)" | "cache-boostrap"'
        path: '$(Build.SourcesDirectory)/vcpkg'

    - task: Cache@2
      displayName: Cache vcpkg artifacts
      inputs:
        key: '$(Build.SourcesDirectory)/vcpkg_manifest/vcpkg.json | "$(Agent.OS)" | "cache-binaries"'
        path: $(Build.BinariesDirectory)/vcpkg/vcpkg_installed

    - task: CMake@1
      displayName: Build vcpkg artifcats
      inputs:
        cmakeArgs: -S "$(Build.SourcesDirectory)/vcpkg_manifest" -B "$(Build.BinariesDirectory)/vcpkg" -DCMAKE_TOOLCHAIN_FILE="$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake"

    - bash: |
        /bin/pwd
        ls -lart
        echo "CPU_INFO:"
        cat /proc/cpuinfo
        echo "HOME = $(HOME)"
        echo "VCPKG dir"
        ls -lart "$(Build.BinariesDirectory)/vcpkg/vcpkg_installed/x64-linux"
        echo "VCPKG bin dir"
        ls -lart "$(Build.BinariesDirectory)/vcpkg/vcpkg_installed/x64-linux/bin"
        $(Build.SourcesDirectory)/_build/print.sh
      displayName: Print infos

    - task: CMake@1
      displayName: Configure code
      inputs:
        cmakeArgs: -S "$(Build.SourcesDirectory)" -B "$(Build.BinariesDirectory)/mybuild" -C $(Build.BinariesDirectory)/vcpkg/my.vcpkg.config.cmake

    - task: CMake@1
      displayName: Build code
      inputs:
        cmakeArgs: --build "$(Build.BinariesDirectory)/mybuild"

    - bash: |
        ctest -T Test -V
      displayName: Launch tests
      workingDirectory: "$(Build.BinariesDirectory)/mybuild"

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: cTest
        testResultsFiles: '$(Build.BinariesDirectory)/mybuild/Testing/*/Test.xml'
        testRunTitle: 'test_win'
